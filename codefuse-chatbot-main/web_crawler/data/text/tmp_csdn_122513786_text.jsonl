{"url": "https://www.langchain.asia/", "host_url": "https://www.langchain.asia", "title": "LangChain中文网:500页中文文档教程，助力大模型LLM应用开发从入门到精通", "all_text": "LangChain中文网:500页中文文档教程，助力大模型LLM应用开发从入门到精通🎉 学 LangChain 免费领 openAI GPT key  限额1000名 →LangChain 🦜️🔗 中文网，跟着LangChain一起学LLM/GPT开发JS/TS LangchainJS/TS Langchain (opens in a new tab)Python LangchainPython Langchain (opens in a new tab) OpenAI 中文文档 OpenAI 中文文档 (opens in a new tab)向量库GitHubGitHub (opens in a new tab)开始快速入门指南安装简介快速入门核心模块（Modules)概述模型 I/O（ModelIO）聊天（Chat）聊天模型缓存（ChatModelCaching）函数回调（FunctionCalling）消息类型（MessageTypes）结构输出（StructuredOutput）获取对数概率（Logprobs）Index大语言模型（Llms）自定义大语言模型（CustomLlm）大语言模型缓存（LlmCaching）流式大语言模型（StreamingLlm）Index提示词（Prompts）示例选择器（ExampleSelectors）基于长度（LengthBased）最大边际相关（MMR）Ngram重叠（NgramOverlap）相似度（Similarity）Index少样本示例（FewShotExamples）聊天少样本示例（FewShotExamplesChat）部分（Partial）Index输出解析器（OutputParsers）类型（Types）日期时间（Datetime）枚举（Enum）OpenAI函数（OpenaiFunctions）输出修复（OutputFixing）Pandas数据框（PandasDataFrame）Pydantic（Pydantic）重试（Retry）结构化（Structured）XML（Xml）YAML（Yaml）IndexIndex索引（Index）数据连接（DataConnection）文档加载器（DocumentLoaders）CSV（Csv）自定义（Custom）文件目录（FileDirectory）HTML（Html）JSON（Json）Markdown（Markdown）Office文件（OfficeFile）PDF（Pdf）Index文档转换器（DocumentTransformers）字符文本分割器（CharacterTextSplitter）代码分割器（CodeSplitter）HTML头部元数据（HTMLHeaderMetadata）HTML段落感知分割器（HTMLSectionAwareSplitter）Markdown头部元数据（MarkdownHeaderMetadata）递归JSON分割器（RecursiveJsonSplitter）递归文本分割器（RecursiveTextSplitter）语义分块器（SemanticChunker）按令牌分割（SplitByToken）Index索引（Indexing）检索器（Retrievers）上下文压缩（ContextualCompression）集成（Ensemble）长上下文重排序（LongContextReorder）多查询检索器（MultiQueryRetriever）多向量（MultiVector）父文档检索器（ParentDocumentRetriever）自查询（SelfQuery）时间加权向量存储（TimeWeightedVectorStore）向量存储（VectorStore）Index文本嵌入（TextEmbedding）缓存嵌入（CachingEmbeddings）Index向量存储（VectorStores）Index索引（Index）链（Chains）代理（Agents）代理类型（AgentTypes）所有可用代理分类JSON代理（JsonAgent）OpenAI助手（OpenaiAssistants）OpenAI功能代理（OpenaiFunctionsAgent）React（React）自问自答搜索（SelfAskWithSearch）结构化聊天（StructuredChat）工具调用（ToolCalling）XML代理（XmlAgent）概念（Concepts）操作指南（HowTo）代理迭代（AgentIter）结构化代理（AgentStructured）自定义代理（CustomAgent）处理解析错误（HandleParsingErrors）中间步骤（IntermediateSteps）最大迭代次数（MaxIterations）最大时间限制（MaxTimeLimit）流式传输（Streaming）快速开始（QuickStart）索引（Index）记忆（Memory）添加记忆（AddingMemory）添加多输入记忆链（AddingMemoryChainMultipleInputs）带记忆的代理（AgentWithMemory）数据库中带记忆的代理（AgentWithMemoryInDb）聊天消息（ChatMessages）Index会话定制（ConversationalCustomization）自定义记忆（CustomMemory）多个记忆类（MultipleMemory）类型（Types）缓冲区（Buffer）缓冲窗口（BufferWindow）实体摘要记忆（EntitySummaryMemory）知识图谱（Kg）摘要（Summary）摘要缓冲区（SummaryBuffer）令牌缓冲区（TokenBuffer）向量存储检索记忆（VectorstoreRetrieverMemory）Index索引（Index）合成高级组件（Composition）工具（Tools）自定义工具（CustomTools）工具包（Toolkits）作为OpenAI函数的工具（ToolsAsOpenaiFunctions）Index回调（Callbacks）异步回调（AsyncCallbacks）自定义回调（CustomCallbacks）文件回调处理器（FileCallbackHandler）多重回调（MultipleCallbacks）标签（Tags）令牌计数（TokenCounting）索引（Index）用例（User Case)接口（Apis）聊天机器人（Chatbots）内存管理（MemoryManagement）快速开始（Quickstart）检索（Retrieval）工具使用（ToolUsage）代码理解（CodeUnderstanding）数据生成（DataGeneration）抽取（Extraction）指南（Guidelines）操作指南（HowTo）示例（Examples）处理文件（HandleFiles）处理长文本（HandleLongText）解析（Parse）图（Graph）构建（Constructing）映射（Mapping）提示（Prompting）语义（Semantic）查询分析（QueryAnalysis）操作指南（HowTo）构建过滤器（constructing-filters）少样本（FewShot）高基数（HighCardinality）多查询（MultipleQueries）多检索器（MultipleRetrievers）无查询（NoQueries）技术（Techniques）分解（Decomposition）扩展（Expansion）Hyde（Hyde）路由（Routing）回退（StepBack）结构化（Structuring）问答（QuestionAnswering）聊天记录（ChatHistory）引用（Citations）会话检索代理（ConversationalRetrievalAgents）本地检索问答（LocalRetrievalQa）每用户（PerUser）来源（Sources）流式传输（Streaming）SQL（Sql）代理（Agents）CSV（Csv）大数据库（LargeDb）查询检查（QueryChecking）摘要（Summarization）标记（Tagging）工具使用（ToolUse）人工介入（HumanInTheLoop）多工具（MultipleTools）并行（Parallel）工具错误处理（ToolErrorHandling）网页抓取（WebScraping）表达式（LangChain Expression Language）操作手册（Cookbook）代码编写（CodeWriting）多链（MultipleChains）提示LLM解析器（PromptLlmParser）提示大小（PromptSize）快速入门（GetStarted）操作指南（HowTo）装饰器（Decorator）检查（Inspect）消息历史（MessageHistory）路由（Routing）索引（Index）接口（Interface）元语（Primitives）分配（Assign）绑定（Binding）配置（Configure）函数（Functions）并行（Parallel）透传（Passthrough）顺序（Sequence）流式传输（Streaming）为什么（Why）Langsmith索引（Index）演练（Walkthrough）生态（Ecosystem)Ai21Clearml TrackingCohereComet TrackingDataberryDeepinfraDeeplakeForefrontaiGoogle SearchGoogle SerperGooseaiGpt4allGraphsignalHazy ResearchHeliconeHuggingfaceJinaLancedbLlamacppMetalMilvusModalMyscaleNlpcloudOpenaiOpensearchPetalsPgvectorPineconePipelineaiPredictionguardPromptlayerQdrantRedisRunhouseRwkvSearxSerpapiStochasticaiTairUnstructuredWeaviateWolfram Alpha参考资料（Reference)代理（Agents)索引（Indexes)安装（Installation)模型（Models)提示（Prompts)开始入门表达式语言生态系统安全其他资源相关文档快速入门指南安装简介快速入门核心模块（Modules)概述模型 I/O（ModelIO）聊天（Chat）聊天模型缓存（ChatModelCaching）函数回调（FunctionCalling）消息类型（MessageTypes）结构输出（StructuredOutput）获取对数概率（Logprobs）Index大语言模型（Llms）自定义大语言模型（CustomLlm）大语言模型缓存（LlmCaching）流式大语言模型（StreamingLlm）Index提示词（Prompts）示例选择器（ExampleSelectors）基于长度（LengthBased）最大边际相关（MMR）Ngram重叠（NgramOverlap）相似度（Similarity）Index少样本示例（FewShotExamples）聊天少样本示例（FewShotExamplesChat）部分（Partial）Index输出解析器（OutputParsers）类型（Types）日期时间（Datetime）枚举（Enum）OpenAI函数（OpenaiFunctions）输出修复（OutputFixing）Pandas数据框（PandasDataFrame）Pydantic（Pydantic）重试（Retry）结构化（Structured）XML（Xml）YAML（Yaml）IndexIndex索引（Index）数据连接（DataConnection）文档加载器（DocumentLoaders）CSV（Csv）自定义（Custom）文件目录（FileDirectory）HTML（Html）JSON（Json）Markdown（Markdown）Office文件（OfficeFile）PDF（Pdf）Index文档转换器（DocumentTransformers）字符文本分割器（CharacterTextSplitter）代码分割器（CodeSplitter）HTML头部元数据（HTMLHeaderMetadata）HTML段落感知分割器（HTMLSectionAwareSplitter）Markdown头部元数据（MarkdownHeaderMetadata）递归JSON分割器（RecursiveJsonSplitter）递归文本分割器（RecursiveTextSplitter）语义分块器（SemanticChunker）按令牌分割（SplitByToken）Index索引（Indexing）检索器（Retrievers）上下文压缩（ContextualCompression）集成（Ensemble）长上下文重排序（LongContextReorder）多查询检索器（MultiQueryRetriever）多向量（MultiVector）父文档检索器（ParentDocumentRetriever）自查询（SelfQuery）时间加权向量存储（TimeWeightedVectorStore）向量存储（VectorStore）Index文本嵌入（TextEmbedding）缓存嵌入（CachingEmbeddings）Index向量存储（VectorStores）Index索引（Index）链（Chains）代理（Agents）代理类型（AgentTypes）所有可用代理分类JSON代理（JsonAgent）OpenAI助手（OpenaiAssistants）OpenAI功能代理（OpenaiFunctionsAgent）React（React）自问自答搜索（SelfAskWithSearch）结构化聊天（StructuredChat）工具调用（ToolCalling）XML代理（XmlAgent）概念（Concepts）操作指南（HowTo）代理迭代（AgentIter）结构化代理（AgentStructured）自定义代理（CustomAgent）处理解析错误（HandleParsingErrors）中间步骤（IntermediateSteps）最大迭代次数（MaxIterations）最大时间限制（MaxTimeLimit）流式传输（Streaming）快速开始（QuickStart）索引（Index）记忆（Memory）添加记忆（AddingMemory）添加多输入记忆链（AddingMemoryChainMultipleInputs）带记忆的代理（AgentWithMemory）数据库中带记忆的代理（AgentWithMemoryInDb）聊天消息（ChatMessages）Index会话定制（ConversationalCustomization）自定义记忆（CustomMemory）多个记忆类（MultipleMemory）类型（Types）缓冲区（Buffer）缓冲窗口（BufferWindow）实体摘要记忆（EntitySummaryMemory）知识图谱（Kg）摘要（Summary）摘要缓冲区（SummaryBuffer）令牌缓冲区（TokenBuffer）向量存储检索记忆（VectorstoreRetrieverMemory）Index索引（Index）合成高级组件（Composition）工具（Tools）自定义工具（CustomTools）工具包（Toolkits）作为OpenAI函数的工具（ToolsAsOpenaiFunctions）Index回调（Callbacks）异步回调（AsyncCallbacks）自定义回调（CustomCallbacks）文件回调处理器（FileCallbackHandler）多重回调（MultipleCallbacks）标签（Tags）令牌计数（TokenCounting）索引（Index）用例（User Case)接口（Apis）聊天机器人（Chatbots）内存管理（MemoryManagement）快速开始（Quickstart）检索（Retrieval）工具使用（ToolUsage）代码理解（CodeUnderstanding）数据生成（DataGeneration）抽取（Extraction）指南（Guidelines）操作指南（HowTo）示例（Examples）处理文件（HandleFiles）处理长文本（HandleLongText）解析（Parse）图（Graph）构建（Constructing）映射（Mapping）提示（Prompting）语义（Semantic）查询分析（QueryAnalysis）操作指南（HowTo）构建过滤器（constructing-filters）少样本（FewShot）高基数（HighCardinality）多查询（MultipleQueries）多检索器（MultipleRetrievers）无查询（NoQueries）技术（Techniques）分解（Decomposition）扩展（Expansion）Hyde（Hyde）路由（Routing）回退（StepBack）结构化（Structuring）问答（QuestionAnswering）聊天记录（ChatHistory）引用（Citations）会话检索代理（ConversationalRetrievalAgents）本地检索问答（LocalRetrievalQa）每用户（PerUser）来源（Sources）流式传输（Streaming）SQL（Sql）代理（Agents）CSV（Csv）大数据库（LargeDb）查询检查（QueryChecking）摘要（Summarization）标记（Tagging）工具使用（ToolUse）人工介入（HumanInTheLoop）多工具（MultipleTools）并行（Parallel）工具错误处理（ToolErrorHandling）网页抓取（WebScraping）表达式（LangChain Expression Language）操作手册（Cookbook）代码编写（CodeWriting）多链（MultipleChains）提示LLM解析器（PromptLlmParser）提示大小（PromptSize）快速入门（GetStarted）操作指南（HowTo）装饰器（Decorator）检查（Inspect）消息历史（MessageHistory）路由（Routing）索引（Index）接口（Interface）元语（Primitives）分配（Assign）绑定（Binding）配置（Configure）函数（Functions）并行（Parallel）透传（Passthrough）顺序（Sequence）流式传输（Streaming）为什么（Why）Langsmith索引（Index）演练（Walkthrough）生态（Ecosystem)Ai21Clearml TrackingCohereComet TrackingDataberryDeepinfraDeeplakeForefrontaiGoogle SearchGoogle SerperGooseaiGpt4allGraphsignalHazy ResearchHeliconeHuggingfaceJinaLancedbLlamacppMetalMilvusModalMyscaleNlpcloudOpenaiOpensearchPetalsPgvectorPineconePipelineaiPredictionguardPromptlayerQdrantRedisRunhouseRwkvSearxSerpapiStochasticaiTairUnstructuredWeaviateWolfram Alpha参考资料（Reference)代理（Agents)索引（Indexes)安装（Installation)模型（Models)提示（Prompts)JS/TS Langchain (opens in a new tab)Python Langchain (opens in a new tab) OpenAI 中文文档 (opens in a new tab)向量库 Pinecone 中文文档 (opens in a new tab) Milvus 中文文档 (opens in a new tab)LightOn This Page入门表达式语言生态系统🦜🛠️ LangSmith🦜🕸️ LangGraph🦜🏓 LangServe安全其他资源组件集成指南API 参考贡献相关文档Question? Give us feedback → (opens in a new tab)Edit this page开始\n(opens in a new tab)\n(opens in a new tab)\n(opens in a new tab)\n【10000个AI开发者，在这等你入群】点击领取 (opens in a new tab)\n\n免费领取：OpenAI GPT KEY\n免费直播课：2节 知乎 AI 全栈工程师直播课\n免费在线课：60 分钟入门 LangChain 课程\n免费图书：30 本精选人工智能电子书 PDF\n免费报告：500 份人工智能行业报告 PDF\n免费视频：大语言模型开发应用视频教程\n\nLangChain 介绍\nLangChain 是一个基于大型语言模型（LLM）开发应用程序的框架。\nLangChain 简化了LLM应用程序生命周期的每个阶段：\n\n开发：使用 LangChain 的开源构建模块和组件构建应用程序。使用第三方集成 (opens in a new tab)和模板 (opens in a new tab)快速上手。\n生产化：使用LangSmith检查、监控和评估你的链条，以便你可以持续优化和自信地部署。\n部署：使用LangServe (opens in a new tab)将任何链条转变为 API。\n\n具体而言，该框架由以下开源库组成：\n\n```code\nlangchain-core\n```\n：基本抽象和 LangChain 表达式语言。\n\n```code\nlangchain-community\n```\n：第三方集成。\n\n合作伙伴包（例如\n```code\nlangchain-openai\n```\n，\n```code\nlangchain-anthropic\n```\n等）：某些集成已进一步拆分为仅依赖于\n```code\nlangchain-core\n```\n的轻量级包。\n\n```code\nlangchain\n```\n：构成应用程序认知架构的链条、代理和检索策略。\nlanggraph (opens in a new tab)：通过将步骤建模为图中的边缘和节点，使用LLMs构建强大且有状态的多角色应用程序。\nlangserve (opens in a new tab)：将 LangChain 链条部署为 REST API。\n\n更广泛的生态系统包括：\n\nLangSmith：开发人员平台，可让你对LLM应用程序进行调试、测试、评估和监控，并与LangChain无缝集成。\n\n入门\n我们推荐按照我们的快速入门指南，通过构建你的第一个 LangChain 应用程序来熟悉该框架。\n在这里查看关于如何安装 LangChain、设置环境并开始构建的说明。\n:::🗒️\n这些文档关注的是 Python LangChain 库。要了解 JavaScript LangChain 库的文档，请点击此处 (opens in a new tab)。\n:::\n表达式语言\nLangChain 表达式语言（LCEL）是许多 LangChain 组件的基础，是一种组合链式的声明式方法。LCEL 从一开始就被设计为支持将原型投入到生产中，从最简单的“提示 + LLM”链条到最复杂的链条，无需更改代码。\n\n入门: LCEL 及其优势\nRunnable 接口: LCEL 对象的标准接口\nLCEL 元语: 更多关于 LCEL 包含的元语信息\n等等！\n\n生态系统\n🦜🛠️ LangSmith\n跟踪和评估你的语言模型应用程序和智能代理，帮助你从原型过渡到生产。\n🦜🕸️ LangGraph (opens in a new tab)\n基于（并且旨在与之配合使用的）LangChain 原语构建有状态的多角色应用程序。\n🦜🏓 LangServe (opens in a new tab)\n将 LangChain 可运行和链条部署为 REST API。\n安全 (opens in a new tab)\n阅读我们的安全 (opens in a new tab)最佳实践，确保你在安全地使用 LangChain 进行开发。\n其他资源\n组件\nLangChain 提供了许多不同组件的标准可扩展接口和集成，包括：\n集成 (opens in a new tab)\nLangChain 是一个丰富的生态系统中的一部分，与我们的框架集成并在其之上构建的工具。请查看我们不断增长的集成 (opens in a new tab)列表。\n指南\n使用 LangChain 的最佳实践。\nAPI 参考 (opens in a new tab)\n访问参考部分，了解 LangChain 和 LangChain Experimental Python 包中所有类和方法的完整文档。\n贡献 (opens in a new tab)\n查看开发人员指南，了解如何参与贡献，并帮助你设置开发环境。\n相关文档\n关于 Python最新版本文档，请参见\n这里 (opens in a new tab)\n。\n关于 LangChain 的纯概念指南请见\n这里 (opens in a new tab)\n。\n关于 JavaScript 的文档，请参见\n这里 (opens in a new tab)\n。\n关于 COOKBOOK 的文档，请参见\n这里 (opens in a new tab)\n。安装LightMIT 2024 © Langchain中文网. 跟着langchain学AI应用开发        GitHub    |    LLM/GPT应用外包开发    |    OpenAI 文档    |    Milvus 文档    |    Pinecone 文档     Langchain英文站    |      Langchain JS/TS 文档     |    大模型API聚合     |   沪ICP备2023014280号-3"}
